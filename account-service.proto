syntax = "proto3";

package proto;

/**
 * AccountResponse follows the OpenID connect userinfo specification:
 * https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims
 *
 * Be aware most fields are usually empty.
 */
message AccountResponse {
  // The identifier of the user.
  string id = 1;

  // Subject is the fully qualified identifier for the user account.
  string sub = 2;

  // End-User's full name. The maximum length is 100 characters.
  string name = 3;

  // First name(s) of the user. The maximum length is 30 characters.
  string given_name = 4;

  // Last name(s) of the user. The maximum length is 30 characters.
  string family_name = 5;

  // Middle name(s) of the user. The maximum length is 30 characters.
  string middle_name = 6;

  // Casual name of the user that may or may not be the same as the given_name.
  // The maximum length is 15 characters.
  string nickname = 7;

  // Shorthand name which the user should be referred to. This field is
  // always set unlike the other name fields. It can change.
  //
  // When upon registration only an email address is given the preferred username
  // is derived from the email address, e.g. "john.doe@example.com" yields "john_doe".
  // If already in use a number is appended, e.g. "john_doe2".
  //
  // The preferred username may only contain alphanumeric characters and underscores.
  // The maximum length is 15 characters.
  string preferred_username = 8;

  // URL of user profile page. The maximum length is 255 characters.
  string profile = 9;

  // URL of user picture. The maximum length is 255 characters.
  string picture = 10;

  // URL of user web page or blog.
  string website = 11;

  // User's preferred e-mail address.
  string email = 12;

  // True if the user's e-mail address has been verified; otherwise false.
  bool email_verified = 13;

  // The gender is either "male", "female", "genderqueer" or empty.
  string gender = 14;

  // User's birthday is formatted in YYYY-MM-DD format.
  string birthdate = 15;

  // String from a time zone database representing the user's time zone.
  string zoneinfo = 16;

  // User's locale, represented as a BCP47 [RFC5646] language tag.
  string locale = 17;

  // User's preferred phone number.
  string phone_number = 18;

  // True if the user's phone number has been verified; otherwise false.
  bool phone_number_verified = 19;

  // Unix timestamp when user account was created.
  int64 created_at = 20;

  // Unix timestamp when user information was last updated.
  int64 updated_at = 21;

  // Unix timestamp when account was cancelled. Cancelled accounts are
  // automatically removed after two months.
  int64 cancelled_at = 22;
}

/**
 * EmailResponse contains an email address. Email addresses are always unique.
 */
message EmailResponse {
  // Unique email identifier.
  string id = 1;

  // The account to which this email belongs. An email can only belong
  // to 1 account.
  string account_id = 2;

  // E-mail address.
  string email = 3;

  // True if the user's e-mail address has been verified; otherwise false.
  bool is_verified = 4;

  // True if this is the user's preferred email address. Only 1 email address will be
  // primary.
  bool is_primary = 5;

  // Unix timestamp when email was created.
  int64 created_at = 6;

  // Unix timestamp when email was last updated.
  int64 updated_at = 7;
}

message GetAccountByIdRequest {
  string account_id = 1;
}

message AuthenticateByEmailRequest {
  string email = 1;
  string password = 2;
}

/**
 * ResendVerificationRequest schedules a reset password email.
 *
 * The link expires after 3 hours.
 */
message ForgotPasswordRequest {
  string email = 1;
}

/**
 * ForgotPassword sends an empty response when a new forgot password
 * email has been scheduled. Normally an email arrives within a couple of minutes.
 *
 * Returns a NotFound error code if the email address did not match any account.
 */
message ForgotPasswordResponse {}

/**
 * ResetPassword updates an account password using a reset token as proof.
 */
message ResetPasswordRequest {
  string reset_token = 1;
  string new_password = 2;
}

/**
 * ResetPassword sends an empty response when the password was updated
 * successfully.
 *
 * Returns an Unauthenticated error if the reset token does not exist or
 * has expired.
 */
message ResetPasswordResponse {}

/**
 * UpdatePasswordRequest changes an account password with a user password as
 * verification.
 */
message UpdatePasswordRequest {
  string account_id = 1;
  string password = 2;
  string new_password = 3;
}

/**
 * UpdatePassword sends an empty response when the password was updated
 * successfully.
 *
 * Returns an Unauthenticated error if the password was invalid.
 *
 * Returns an NotFound error if the account could not be found.
 */
message UpdatePasswordResponse {}

message VerifyEmailRequest {
  string token = 1;
}

message CreateAccountRequest {
  string email = 1;
  string password = 2;
  string name = 3;
  string given_name = 4;
  string family_name = 5;
  string middle_name = 6;
  string nickname = 7;
  string preferred_username = 8;
  string profile = 9;
  string picture = 10;
  string website = 11;
  string gender = 12;
  string birthdate = 13;
  string zoneinfo = 14;
  string locale = 15;
}

message UpdateAccountRequest {
  string account_id = 1;
  string name = 2;
  string given_name = 3;
  string family_name = 4;
  string middle_name = 5;
  string nickname = 6;
  string preferred_username = 7;
  string profile = 8;
  string picture = 9;
  string website = 10;
  string gender = 11;
  string birthdate = 12;
  string zoneinfo = 13;
  string locale = 14;
}

/**
 * ResendVerificationRequest requests a new verification email.
 */
message ResendVerificationRequest {
  string email = 1;
}

/**
 * ResendVerification sends an empty response when a new verification
 * email has been scheduled. Normally an email arrives within a couple
 * of minutes.
 *
 * Returns a NotFound error code if the email address did not match
 * any account.
 *
 * Returns a FailedPrecondition error code if the specified email
 * address is already verified.
 */
message ResendVerificationResponse {}

/**
 * CancelAccount disables an account and removes all auth tokens
 * associated with the user.
 *
 * Cancelled accounts are completely removed after 2 months.
 *
 * To regain access to a cancelled account before the account is
 * permanently deleted send an email to support@metrix.io
 */
message CancelAccountRequest{
  string account_id = 1;
}

/**
 * CancelAccount sends an empty response when the account has
 * successfully been cancelled.
 */
message CancelAccountResponse{}

service AccountService {
  rpc CreateAccount (CreateAccountRequest) returns (AccountResponse) {}
  rpc GetAccountById (GetAccountByIdRequest) returns (AccountResponse) {}
  rpc AuthenticateByEmail (AuthenticateByEmailRequest) returns (AccountResponse) {}
  rpc ForgotPassword (ForgotPasswordRequest) returns (ForgotPasswordResponse) {}
  rpc ResetPassword (ResetPasswordRequest) returns (ResetPasswordResponse) {}
  rpc UpdatePassword (UpdatePasswordRequest) returns (UpdatePasswordResponse) {}
  rpc VerifyEmail (VerifyEmailRequest) returns (EmailResponse) {}
  rpc ResendVerification (ResendVerificationRequest) returns (ResendVerificationResponse) {}
  rpc CancelAccount (CancelAccountRequest) returns (AccountResponse) {}
}