// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1/id_service.proto

package id_service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IdRequest struct {
	Number               uint32   `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Base85               bool     `protobuf:"varint,2,opt,name=base85,proto3" json:"base85,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdRequest) Reset()         { *m = IdRequest{} }
func (m *IdRequest) String() string { return proto.CompactTextString(m) }
func (*IdRequest) ProtoMessage()    {}
func (*IdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_id_service_9e13d38cbc32fff2, []int{0}
}
func (m *IdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdRequest.Unmarshal(m, b)
}
func (m *IdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdRequest.Marshal(b, m, deterministic)
}
func (dst *IdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdRequest.Merge(dst, src)
}
func (m *IdRequest) XXX_Size() int {
	return xxx_messageInfo_IdRequest.Size(m)
}
func (m *IdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IdRequest proto.InternalMessageInfo

func (m *IdRequest) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *IdRequest) GetBase85() bool {
	if m != nil {
		return m.Base85
	}
	return false
}

type IdResponse struct {
	Ids                  []*IdResponse_Id `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *IdResponse) Reset()         { *m = IdResponse{} }
func (m *IdResponse) String() string { return proto.CompactTextString(m) }
func (*IdResponse) ProtoMessage()    {}
func (*IdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_id_service_9e13d38cbc32fff2, []int{1}
}
func (m *IdResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdResponse.Unmarshal(m, b)
}
func (m *IdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdResponse.Marshal(b, m, deterministic)
}
func (dst *IdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdResponse.Merge(dst, src)
}
func (m *IdResponse) XXX_Size() int {
	return xxx_messageInfo_IdResponse.Size(m)
}
func (m *IdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IdResponse proto.InternalMessageInfo

func (m *IdResponse) GetIds() []*IdResponse_Id {
	if m != nil {
		return m.Ids
	}
	return nil
}

type IdResponse_Id struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Base58               string   `protobuf:"bytes,2,opt,name=base58,proto3" json:"base58,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdResponse_Id) Reset()         { *m = IdResponse_Id{} }
func (m *IdResponse_Id) String() string { return proto.CompactTextString(m) }
func (*IdResponse_Id) ProtoMessage()    {}
func (*IdResponse_Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_id_service_9e13d38cbc32fff2, []int{1, 0}
}
func (m *IdResponse_Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdResponse_Id.Unmarshal(m, b)
}
func (m *IdResponse_Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdResponse_Id.Marshal(b, m, deterministic)
}
func (dst *IdResponse_Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdResponse_Id.Merge(dst, src)
}
func (m *IdResponse_Id) XXX_Size() int {
	return xxx_messageInfo_IdResponse_Id.Size(m)
}
func (m *IdResponse_Id) XXX_DiscardUnknown() {
	xxx_messageInfo_IdResponse_Id.DiscardUnknown(m)
}

var xxx_messageInfo_IdResponse_Id proto.InternalMessageInfo

func (m *IdResponse_Id) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *IdResponse_Id) GetBase58() string {
	if m != nil {
		return m.Base58
	}
	return ""
}

func init() {
	proto.RegisterType((*IdRequest)(nil), "IdRequest")
	proto.RegisterType((*IdResponse)(nil), "IdResponse")
	proto.RegisterType((*IdResponse_Id)(nil), "IdResponse.Id")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IdGeneratorClient is the client API for IdGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IdGeneratorClient interface {
	Generate(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*IdResponse, error)
}

type idGeneratorClient struct {
	cc *grpc.ClientConn
}

func NewIdGeneratorClient(cc *grpc.ClientConn) IdGeneratorClient {
	return &idGeneratorClient{cc}
}

func (c *idGeneratorClient) Generate(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := c.cc.Invoke(ctx, "/IdGenerator/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdGeneratorServer is the server API for IdGenerator service.
type IdGeneratorServer interface {
	Generate(context.Context, *IdRequest) (*IdResponse, error)
}

func RegisterIdGeneratorServer(s *grpc.Server, srv IdGeneratorServer) {
	s.RegisterService(&_IdGenerator_serviceDesc, srv)
}

func _IdGenerator_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdGeneratorServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IdGenerator/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdGeneratorServer).Generate(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IdGenerator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "IdGenerator",
	HandlerType: (*IdGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _IdGenerator_Generate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/id_service.proto",
}

func init() { proto.RegisterFile("v1/id_service.proto", fileDescriptor_id_service_9e13d38cbc32fff2) }

var fileDescriptor_id_service_9e13d38cbc32fff2 = []byte{
	// 193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x33, 0xd4, 0xcf,
	0x4c, 0x89, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57,
	0xb2, 0xe6, 0xe2, 0xf4, 0x4c, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe3, 0x62,
	0xcb, 0x2b, 0xcd, 0x4d, 0x4a, 0x2d, 0x92, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0d, 0x82, 0xf2, 0x40,
	0xe2, 0x49, 0x89, 0xc5, 0xa9, 0x16, 0xa6, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x1c, 0x41, 0x50, 0x9e,
	0x52, 0x0c, 0x17, 0x17, 0x48, 0x73, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x02, 0x17, 0x73,
	0x66, 0x4a, 0xb1, 0x04, 0xa3, 0x02, 0xb3, 0x06, 0xb7, 0x11, 0x9f, 0x1e, 0x42, 0x06, 0xc4, 0x04,
	0x49, 0x49, 0xe9, 0x70, 0x31, 0x79, 0xa6, 0x08, 0xf1, 0x71, 0x31, 0x65, 0xa6, 0x80, 0x6d, 0x60,
	0x09, 0x62, 0xca, 0x4c, 0x81, 0x99, 0x6e, 0x6a, 0x01, 0x36, 0x9d, 0x33, 0x08, 0xca, 0x33, 0x32,
	0xe2, 0xe2, 0xf6, 0x4c, 0x71, 0x4f, 0xcd, 0x4b, 0x2d, 0x4a, 0x2c, 0xc9, 0x2f, 0x12, 0x52, 0xe6,
	0xe2, 0x80, 0x72, 0x52, 0x85, 0xb8, 0xf4, 0xe0, 0x8e, 0x96, 0xe2, 0x46, 0xb2, 0x29, 0x89, 0x0d,
	0xec, 0x2b, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5c, 0xa7, 0x99, 0x91, 0xec, 0x00, 0x00,
	0x00,
}
