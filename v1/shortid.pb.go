// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1/shortid.proto

package shortid

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ShortIdRequest struct {
	Number               int32    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShortIdRequest) Reset()         { *m = ShortIdRequest{} }
func (m *ShortIdRequest) String() string { return proto.CompactTextString(m) }
func (*ShortIdRequest) ProtoMessage()    {}
func (*ShortIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_shortid_d15a964d2b673ed3, []int{0}
}
func (m *ShortIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShortIdRequest.Unmarshal(m, b)
}
func (m *ShortIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShortIdRequest.Marshal(b, m, deterministic)
}
func (dst *ShortIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShortIdRequest.Merge(dst, src)
}
func (m *ShortIdRequest) XXX_Size() int {
	return xxx_messageInfo_ShortIdRequest.Size(m)
}
func (m *ShortIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShortIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShortIdRequest proto.InternalMessageInfo

func (m *ShortIdRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type ShortIdResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShortIdResponse) Reset()         { *m = ShortIdResponse{} }
func (m *ShortIdResponse) String() string { return proto.CompactTextString(m) }
func (*ShortIdResponse) ProtoMessage()    {}
func (*ShortIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_shortid_d15a964d2b673ed3, []int{1}
}
func (m *ShortIdResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShortIdResponse.Unmarshal(m, b)
}
func (m *ShortIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShortIdResponse.Marshal(b, m, deterministic)
}
func (dst *ShortIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShortIdResponse.Merge(dst, src)
}
func (m *ShortIdResponse) XXX_Size() int {
	return xxx_messageInfo_ShortIdResponse.Size(m)
}
func (m *ShortIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ShortIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ShortIdResponse proto.InternalMessageInfo

func (m *ShortIdResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*ShortIdRequest)(nil), "ShortIdRequest")
	proto.RegisterType((*ShortIdResponse)(nil), "ShortIdResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IdGeneratorClient is the client API for IdGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IdGeneratorClient interface {
	Generate(ctx context.Context, in *ShortIdRequest, opts ...grpc.CallOption) (*ShortIdResponse, error)
}

type idGeneratorClient struct {
	cc *grpc.ClientConn
}

func NewIdGeneratorClient(cc *grpc.ClientConn) IdGeneratorClient {
	return &idGeneratorClient{cc}
}

func (c *idGeneratorClient) Generate(ctx context.Context, in *ShortIdRequest, opts ...grpc.CallOption) (*ShortIdResponse, error) {
	out := new(ShortIdResponse)
	err := c.cc.Invoke(ctx, "/IdGenerator/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdGeneratorServer is the server API for IdGenerator service.
type IdGeneratorServer interface {
	Generate(context.Context, *ShortIdRequest) (*ShortIdResponse, error)
}

func RegisterIdGeneratorServer(s *grpc.Server, srv IdGeneratorServer) {
	s.RegisterService(&_IdGenerator_serviceDesc, srv)
}

func _IdGenerator_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdGeneratorServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IdGenerator/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdGeneratorServer).Generate(ctx, req.(*ShortIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IdGenerator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "IdGenerator",
	HandlerType: (*IdGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _IdGenerator_Generate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/shortid.proto",
}

func init() { proto.RegisterFile("v1/shortid.proto", fileDescriptor_shortid_d15a964d2b673ed3) }

var fileDescriptor_shortid_d15a964d2b673ed3 = []byte{
	// 139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x33, 0xd4, 0x2f,
	0xce, 0xc8, 0x2f, 0x2a, 0xc9, 0x4c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xd2, 0xe0, 0xe2,
	0x0b, 0x06, 0x09, 0x78, 0xa6, 0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x89, 0x71, 0xb1,
	0xe5, 0x95, 0xe6, 0x26, 0xa5, 0x16, 0x49, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x41, 0x79, 0x4a,
	0x8a, 0x5c, 0xfc, 0x70, 0x95, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x7c, 0x5c, 0x4c, 0x99,
	0x29, 0x60, 0x65, 0x9c, 0x41, 0x4c, 0x99, 0x29, 0x46, 0x36, 0x5c, 0xdc, 0x9e, 0x29, 0xee, 0xa9,
	0x79, 0xa9, 0x45, 0x89, 0x25, 0xf9, 0x45, 0x42, 0xba, 0x5c, 0x1c, 0x50, 0x4e, 0xaa, 0x10, 0xbf,
	0x1e, 0xaa, 0x35, 0x52, 0x02, 0x7a, 0x68, 0xa6, 0x25, 0xb1, 0x81, 0x5d, 0x64, 0x0c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0xa2, 0x80, 0x28, 0x86, 0xa5, 0x00, 0x00, 0x00,
}
