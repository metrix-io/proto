syntax = "proto3";

package metrixio;

option go_package = "github.com/metrix-io/proto/golang"; // Go.mod doesn't allow /v0 or /v1

message LoginRequest {
    string login = 1;
    string password = 2;
}

message AccessToken {
    string access_token = 1;

    string subject = 2;

    // The lifetime of the access token in seconds.
    int32 expires_in = 3;

    // Unix timestamp when token expires.
    int64 expires_at = 4;
}

/**
 * A permission specifies a set of operations for a given resource.
 *
 * A resource name starts with an "mtx:"-prefix followed by a resource identifier
 * usually in the form of "mtx:<resource>:<id>:<subresource>:<subid>".
 */
message Permission {
    string resource = 1;
    repeated string operations = 2;
}

message PermissionAssignments {
    string subject = 1;
    repeated Permission permissions = 2;
}

message CreatePermissionsRequest {
    string subject = 1;
    repeated Permission permissions = 2;
}

message CreatePermissionsResponse {}

message DeletePermissionsRequest {
    string subject = 1;
    repeated Permission permissions = 2;
}

message DeletePermissionsResponse {}

message GetPermissionsRequest {
    string subject = 1;
}

message HasPermissionsRequest {
    string subject = 1;
    repeated Permission permissions = 2;
}

message HasPermissionsResponse {
    bool has_permissions = 1;
    repeated Permission missing_permissions = 2;
}

message CreatePermissionInheritanceRequest {
    string subject = 1;
    string parent_subject = 2;
}

message CreatePermissionInheritanceResponse {}

message DeletePermissionInheritanceRequest {
    string subject = 1;
    string parent_subject = 2;
}

message DeletePermissionInheritanceResponse {}

message DeleteSubjectRequest {
    string subject = 1;
}

message DeleteSubjectResponse {}

service AuthService {
    /**
     * LoginRequest returns an access token if the login credentials
     * are valid. The login field may contain either a username or email
     * address.
     *
     * Errors:
     * - UNAUTHENTICATED if the credentials are invalid.
     */
    rpc Login (LoginRequest) returns (AccessToken) {}

    /**
     * CreatePermission adds one or more permissions to a subject.
     *
     * A subject can either be a user account, organization, role or other and must
     * be a valid resource name, e.g. "mtx:account:g921sdfb1lkg".
     *
     * Errors:
     * - PERMISSION_DENIED if the logged in subject has insufficient privileges
     *   to read subject's permissions.
     */
    rpc CreatePermissions (CreatePermissionsRequest) returns (PermissionAssignments) {}

    /**
     * Returns all permissions for the specified subject.
     *
     * Errors:
     * - PERMISSION_DENIED if the logged in subject has insufficient privileges
     *   to read subject's permissions.
     */
    rpc GetPermissions (GetPermissionsRequest) returns (PermissionAssignments) {}

    /**
     * Checks if the subjects has specified permission(s). Returns a list of
     * all permissions that subject is missing.
     *
     * Errors:
     * - PERMISSION_DENIED if the logged in subject has insufficient privileges
     *   to read subject's permissions.
     */
    rpc HasPermissions (HasPermissionsRequest) returns (HasPermissionsResponse) {}

    /**
     * DeletePermissionsRequest removes one or more permissions from a subject.
     *
     * Errors:
     * - PERMISSION_DENIED if the logged in subject has insufficient privileges to
     *   revoke subject's permissions.
     */
    rpc DeletePermissions (DeletePermissionsRequest) returns (DeletePermissionsRequest) {}

    /**
     * DeleteSubject removes any permissions associated with the subject.
     *
     * It also removes any permission inheritance relationships, including those
     * which inherit from the subject being deleted.
     *
     * If the subject being deleted does not have any registered permissions the
     * request will still be deemed successful.
     *
     * Errors:
     * - PERMISSION_DENIED if the logged in subject has insufficient privileges to
     *   delete this subject.
     */
    rpc DeleteSubject (DeleteSubjectRequest) returns (DeleteSubjectResponse) {}

    /**
     * CreatePermissionInheritance establishes a permission inheritance relationship
     * between two subjects. A common example is a user account being part of
     * a group.
     *
     * Errors:
     * - PERMISSION_DENIED if the logged in subject does not have permission to grant
     *   permissions to the parent subject.
     * - NOT_FOUND if no inheritance relationship exists between specified subjects.
     */
    rpc CreatePermissionInheritance (CreatePermissionInheritanceRequest) returns (CreatePermissionInheritanceResponse) {}

    /**
     * DeletePermissionInheritance removes any inheritance relationship between two
     * subjects.
     *
     * Errors:
     * - PERMISSION_DENIED if the logged in subject does not have permission to revoke
     *   permissions of the parent subject.
     * - NOT_FOUND if no inheritance relationship exists between specified subjects.
     */
    rpc DeletePermissionInheritance (DeletePermissionInheritanceRequest) returns (DeletePermissionInheritanceResponse) {}
}
