// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import golang "github.com/metrix-io/proto/golang"
import grpc "google.golang.org/grpc"
import mock "github.com/stretchr/testify/mock"

// AuthServiceClient is an autogenerated mock type for the AuthServiceClient type
type AuthServiceClient struct {
	mock.Mock
}

// CreateInheritPermissions provides a mock function with given fields: ctx, in, opts
func (_m *AuthServiceClient) CreateInheritPermissions(ctx context.Context, in *golang.CreateInheritPermissionsRequest, opts ...grpc.CallOption) (*golang.CreateInheritPermissionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *golang.CreateInheritPermissionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *golang.CreateInheritPermissionsRequest, ...grpc.CallOption) *golang.CreateInheritPermissionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.CreateInheritPermissionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.CreateInheritPermissionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePermissions provides a mock function with given fields: ctx, in, opts
func (_m *AuthServiceClient) CreatePermissions(ctx context.Context, in *golang.CreatePermissionsRequest, opts ...grpc.CallOption) (*golang.PermissionAssignments, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *golang.PermissionAssignments
	if rf, ok := ret.Get(0).(func(context.Context, *golang.CreatePermissionsRequest, ...grpc.CallOption) *golang.PermissionAssignments); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.PermissionAssignments)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.CreatePermissionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInheritPermissions provides a mock function with given fields: ctx, in, opts
func (_m *AuthServiceClient) DeleteInheritPermissions(ctx context.Context, in *golang.DeleteInheritPermissionsRequest, opts ...grpc.CallOption) (*golang.DeleteInheritPermissionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *golang.DeleteInheritPermissionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *golang.DeleteInheritPermissionsRequest, ...grpc.CallOption) *golang.DeleteInheritPermissionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.DeleteInheritPermissionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.DeleteInheritPermissionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePermissions provides a mock function with given fields: ctx, in, opts
func (_m *AuthServiceClient) DeletePermissions(ctx context.Context, in *golang.DeletePermissionsRequest, opts ...grpc.CallOption) (*golang.DeletePermissionsRequest, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *golang.DeletePermissionsRequest
	if rf, ok := ret.Get(0).(func(context.Context, *golang.DeletePermissionsRequest, ...grpc.CallOption) *golang.DeletePermissionsRequest); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.DeletePermissionsRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.DeletePermissionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSubject provides a mock function with given fields: ctx, in, opts
func (_m *AuthServiceClient) DeleteSubject(ctx context.Context, in *golang.DeleteSubjectRequest, opts ...grpc.CallOption) (*golang.DeleteSubjectResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *golang.DeleteSubjectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *golang.DeleteSubjectRequest, ...grpc.CallOption) *golang.DeleteSubjectResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.DeleteSubjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.DeleteSubjectRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPermissions provides a mock function with given fields: ctx, in, opts
func (_m *AuthServiceClient) GetPermissions(ctx context.Context, in *golang.GetPermissionsRequest, opts ...grpc.CallOption) (*golang.PermissionAssignments, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *golang.PermissionAssignments
	if rf, ok := ret.Get(0).(func(context.Context, *golang.GetPermissionsRequest, ...grpc.CallOption) *golang.PermissionAssignments); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.PermissionAssignments)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.GetPermissionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasPermissions provides a mock function with given fields: ctx, in, opts
func (_m *AuthServiceClient) HasPermissions(ctx context.Context, in *golang.HasPermissionsRequest, opts ...grpc.CallOption) (*golang.HasPermissionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *golang.HasPermissionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *golang.HasPermissionsRequest, ...grpc.CallOption) *golang.HasPermissionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.HasPermissionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.HasPermissionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, in, opts
func (_m *AuthServiceClient) Login(ctx context.Context, in *golang.LoginRequest, opts ...grpc.CallOption) (*golang.AccessToken, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *golang.AccessToken
	if rf, ok := ret.Get(0).(func(context.Context, *golang.LoginRequest, ...grpc.CallOption) *golang.AccessToken); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.AccessToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.LoginRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
