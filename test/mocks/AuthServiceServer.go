// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import golang "github.com/metrix-io/proto/golang"
import mock "github.com/stretchr/testify/mock"

// AuthServiceServer is an autogenerated mock type for the AuthServiceServer type
type AuthServiceServer struct {
	mock.Mock
}

// CreateInheritPermissions provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) CreateInheritPermissions(_a0 context.Context, _a1 *golang.CreateInheritPermissionsRequest) (*golang.CreateInheritPermissionsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *golang.CreateInheritPermissionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *golang.CreateInheritPermissionsRequest) *golang.CreateInheritPermissionsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.CreateInheritPermissionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.CreateInheritPermissionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePermissions provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) CreatePermissions(_a0 context.Context, _a1 *golang.CreatePermissionsRequest) (*golang.PermissionAssignments, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *golang.PermissionAssignments
	if rf, ok := ret.Get(0).(func(context.Context, *golang.CreatePermissionsRequest) *golang.PermissionAssignments); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.PermissionAssignments)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.CreatePermissionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInheritPermissions provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) DeleteInheritPermissions(_a0 context.Context, _a1 *golang.DeleteInheritPermissionsRequest) (*golang.DeleteInheritPermissionsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *golang.DeleteInheritPermissionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *golang.DeleteInheritPermissionsRequest) *golang.DeleteInheritPermissionsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.DeleteInheritPermissionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.DeleteInheritPermissionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePermissions provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) DeletePermissions(_a0 context.Context, _a1 *golang.DeletePermissionsRequest) (*golang.DeletePermissionsRequest, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *golang.DeletePermissionsRequest
	if rf, ok := ret.Get(0).(func(context.Context, *golang.DeletePermissionsRequest) *golang.DeletePermissionsRequest); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.DeletePermissionsRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.DeletePermissionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSubject provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) DeleteSubject(_a0 context.Context, _a1 *golang.DeleteSubjectRequest) (*golang.DeleteSubjectResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *golang.DeleteSubjectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *golang.DeleteSubjectRequest) *golang.DeleteSubjectResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.DeleteSubjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.DeleteSubjectRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPermissions provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) GetPermissions(_a0 context.Context, _a1 *golang.GetPermissionsRequest) (*golang.PermissionAssignments, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *golang.PermissionAssignments
	if rf, ok := ret.Get(0).(func(context.Context, *golang.GetPermissionsRequest) *golang.PermissionAssignments); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.PermissionAssignments)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.GetPermissionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasPermissions provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) HasPermissions(_a0 context.Context, _a1 *golang.HasPermissionsRequest) (*golang.HasPermissionsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *golang.HasPermissionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *golang.HasPermissionsRequest) *golang.HasPermissionsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.HasPermissionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.HasPermissionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) Login(_a0 context.Context, _a1 *golang.LoginRequest) (*golang.AccessToken, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *golang.AccessToken
	if rf, ok := ret.Get(0).(func(context.Context, *golang.LoginRequest) *golang.AccessToken); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.AccessToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.LoginRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
