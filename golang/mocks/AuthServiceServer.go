// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import golang "github.com/metrix-io/proto/golang"
import mock "github.com/stretchr/testify/mock"

// AuthServiceServer is an autogenerated mock type for the AuthServiceServer type
type AuthServiceServer struct {
	mock.Mock
}

// DeleteSubject provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) DeleteSubject(_a0 context.Context, _a1 *golang.DeleteSubjectRequest) (*golang.DeleteSubjectResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *golang.DeleteSubjectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *golang.DeleteSubjectRequest) *golang.DeleteSubjectResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.DeleteSubjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.DeleteSubjectRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPermissions provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) GetPermissions(_a0 context.Context, _a1 *golang.GetPermissionsRequest) (*golang.PermissionAssignments, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *golang.PermissionAssignments
	if rf, ok := ret.Get(0).(func(context.Context, *golang.GetPermissionsRequest) *golang.PermissionAssignments); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.PermissionAssignments)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.GetPermissionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrantPermissions provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) GrantPermissions(_a0 context.Context, _a1 *golang.GrantPermissionsRequest) (*golang.PermissionAssignments, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *golang.PermissionAssignments
	if rf, ok := ret.Get(0).(func(context.Context, *golang.GrantPermissionsRequest) *golang.PermissionAssignments); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.PermissionAssignments)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.GrantPermissionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasPermissions provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) HasPermissions(_a0 context.Context, _a1 *golang.HasPermissionsRequest) (*golang.HasPermissionsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *golang.HasPermissionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *golang.HasPermissionsRequest) *golang.HasPermissionsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.HasPermissionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.HasPermissionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InheritPermissions provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) InheritPermissions(_a0 context.Context, _a1 *golang.InheritPermissionsRequest) (*golang.InheritPermissionsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *golang.InheritPermissionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *golang.InheritPermissionsRequest) *golang.InheritPermissionsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.InheritPermissionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.InheritPermissionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) Login(_a0 context.Context, _a1 *golang.LoginRequest) (*golang.AccessToken, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *golang.AccessToken
	if rf, ok := ret.Get(0).(func(context.Context, *golang.LoginRequest) *golang.AccessToken); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.AccessToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.LoginRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeInheritPermissions provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) RevokeInheritPermissions(_a0 context.Context, _a1 *golang.RevokeInheritPermissionsRequest) (*golang.RevokeInheritPermissionsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *golang.RevokeInheritPermissionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *golang.RevokeInheritPermissionsRequest) *golang.RevokeInheritPermissionsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.RevokeInheritPermissionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.RevokeInheritPermissionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokePermissions provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) RevokePermissions(_a0 context.Context, _a1 *golang.RevokePermissionsRequest) (*golang.RevokePermissionsRequest, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *golang.RevokePermissionsRequest
	if rf, ok := ret.Get(0).(func(context.Context, *golang.RevokePermissionsRequest) *golang.RevokePermissionsRequest); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.RevokePermissionsRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.RevokePermissionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
