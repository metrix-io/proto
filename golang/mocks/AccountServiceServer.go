// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import golang "github.com/metrix-io/proto/golang"
import mock "github.com/stretchr/testify/mock"

// AccountServiceServer is an autogenerated mock type for the AccountServiceServer type
type AccountServiceServer struct {
	mock.Mock
}

// CancelAccount provides a mock function with given fields: _a0, _a1
func (_m *AccountServiceServer) CancelAccount(_a0 context.Context, _a1 *golang.CancelAccountRequest) (*golang.CancelAccountResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *golang.CancelAccountResponse
	if rf, ok := ret.Get(0).(func(context.Context, *golang.CancelAccountRequest) *golang.CancelAccountResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.CancelAccountResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.CancelAccountRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckCredentials provides a mock function with given fields: _a0, _a1
func (_m *AccountServiceServer) CheckCredentials(_a0 context.Context, _a1 *golang.CheckCredentialsRequest) (*golang.Account, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *golang.Account
	if rf, ok := ret.Get(0).(func(context.Context, *golang.CheckCredentialsRequest) *golang.Account); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.CheckCredentialsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckEmail provides a mock function with given fields: _a0, _a1
func (_m *AccountServiceServer) CheckEmail(_a0 context.Context, _a1 *golang.CheckEmailRequest) (*golang.CheckEmailResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *golang.CheckEmailResponse
	if rf, ok := ret.Get(0).(func(context.Context, *golang.CheckEmailRequest) *golang.CheckEmailResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.CheckEmailResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.CheckEmailRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckUsername provides a mock function with given fields: _a0, _a1
func (_m *AccountServiceServer) CheckUsername(_a0 context.Context, _a1 *golang.CheckUsernameRequest) (*golang.CheckUsernameResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *golang.CheckUsernameResponse
	if rf, ok := ret.Get(0).(func(context.Context, *golang.CheckUsernameRequest) *golang.CheckUsernameResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.CheckUsernameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.CheckUsernameRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccount provides a mock function with given fields: _a0, _a1
func (_m *AccountServiceServer) CreateAccount(_a0 context.Context, _a1 *golang.CreateAccountRequest) (*golang.Account, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *golang.Account
	if rf, ok := ret.Get(0).(func(context.Context, *golang.CreateAccountRequest) *golang.Account); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.CreateAccountRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForgotPassword provides a mock function with given fields: _a0, _a1
func (_m *AccountServiceServer) ForgotPassword(_a0 context.Context, _a1 *golang.ForgotPasswordRequest) (*golang.ForgotPasswordResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *golang.ForgotPasswordResponse
	if rf, ok := ret.Get(0).(func(context.Context, *golang.ForgotPasswordRequest) *golang.ForgotPasswordResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.ForgotPasswordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.ForgotPasswordRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountByID provides a mock function with given fields: _a0, _a1
func (_m *AccountServiceServer) GetAccountByID(_a0 context.Context, _a1 *golang.GetAccountByIDRequest) (*golang.Account, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *golang.Account
	if rf, ok := ret.Get(0).(func(context.Context, *golang.GetAccountByIDRequest) *golang.Account); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.GetAccountByIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResendVerification provides a mock function with given fields: _a0, _a1
func (_m *AccountServiceServer) ResendVerification(_a0 context.Context, _a1 *golang.ResendVerificationRequest) (*golang.ResendVerificationResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *golang.ResendVerificationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *golang.ResendVerificationRequest) *golang.ResendVerificationResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.ResendVerificationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.ResendVerificationRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPassword provides a mock function with given fields: _a0, _a1
func (_m *AccountServiceServer) ResetPassword(_a0 context.Context, _a1 *golang.ResetPasswordRequest) (*golang.ResetPasswordResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *golang.ResetPasswordResponse
	if rf, ok := ret.Get(0).(func(context.Context, *golang.ResetPasswordRequest) *golang.ResetPasswordResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.ResetPasswordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.ResetPasswordRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePassword provides a mock function with given fields: _a0, _a1
func (_m *AccountServiceServer) UpdatePassword(_a0 context.Context, _a1 *golang.UpdatePasswordRequest) (*golang.UpdatePasswordResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *golang.UpdatePasswordResponse
	if rf, ok := ret.Get(0).(func(context.Context, *golang.UpdatePasswordRequest) *golang.UpdatePasswordResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.UpdatePasswordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.UpdatePasswordRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyEmail provides a mock function with given fields: _a0, _a1
func (_m *AccountServiceServer) VerifyEmail(_a0 context.Context, _a1 *golang.VerifyEmailRequest) (*golang.VerifyEmailResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *golang.VerifyEmailResponse
	if rf, ok := ret.Get(0).(func(context.Context, *golang.VerifyEmailRequest) *golang.VerifyEmailResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golang.VerifyEmailResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *golang.VerifyEmailRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
